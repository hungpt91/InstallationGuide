Integrating JIRA with Nginx (for SSL)
Fact: We have jira server run as http://xxx:8080 and want to run it with SSL https://yourdomain.com
1. Configure the Connector:
Configure the HTTP connectors so we have one serving as a proxy connector and another for troubleshooting. This is done in the same <JIRA-INSTALL>/conf/server.xml file, locate this code segment:
Defaut:
<Connector port="8080" maxThreads="150" minSpareThreads="25" connectionTimeout="20000" enableLookups="false" maxHttpHeaderSize="8192" protocol="HTTP/1.1" useBodyEncodingForURI="true" redirectPort="8443" acceptCount="100" disableUploadTimeout="true"/> 
And add the proxyName and proxyPort elements (replacing them with the appropriate properties), and another connector below - this is used for troubleshooting to bypass the proxy:
Change to:
<!-- OPTIONAL,Nginx Proxy Connector with https -->
<Connector port="8080" maxThreads="150" minSpareThreads="25" connectionTimeout="20000" enableLookups="false" maxHttpHeaderSize="8192" protocol="HTTP/1.1" useBodyEncodingForURI="true" redirectPort="8443" acceptCount="100" disableUploadTimeout="true"
proxyName="yourdomain.com" proxyPort="443" scheme="https" secure="true"/>
2. Configure nginx

upstream bug{
        server xxx:8080;
        }

    server {
	listen      xxx:80;
        server_name yourdomain.com;
        access_log /data/logs/http.yourdomain.com  main;
        access_log off;


        if ($request_method !~ ^(GET|HEAD|POST)$ ) {
                 return 444;
        }
        rewrite ^(.*) https://$host$1 permanent;
        }

    server {
        listen      xxx:443;
        server_name yourdomain.com;
        access_log /data/logs/yourdomain.com.log  main;
        access_log off;

        ssl                  on;
        ssl_session_cache       shared:TLSSL:200m;
        ssl_session_timeout     10m;
        ssl_certificate      /zserver/nginx/ssl/yourdomain.com.pem;
        ssl_certificate_key  /zserver/nginx/ssl/yourdomain.com.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        #ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDHE-RSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:RC4-SHA;
        #ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-RC4-SHA:ECDH-ECDSA-RC4-SHA:ECDH-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA;
	    ssl_dhparam /zserver/nginx/ssl/dhparam.pem;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4;
        ssl_prefer_server_ciphers on;
	    add_header Strict-Transport-Security "max-age=31536000";
        if ($request_method !~ ^(GET|HEAD|POST|PUT|PATCH|DELETE)$ ) {
           return 444;
           }
     
    location / {
	        proxy_set_header    X-Forwarded-Proto https; 
            proxy_redirect     off;
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            client_max_body_size       0;
            client_body_buffer_size    128k;

            proxy_connect_timeout      300;
            proxy_send_timeout         300;
            proxy_read_timeout         300;
	        keepalive_timeout 	       300;

            proxy_buffering            on;
            proxy_buffer_size          4k;
            proxy_buffers              4 32k;
            proxy_busy_buffers_size    64k;
            proxy_temp_file_write_size 64k;
            proxy_pass  http://bug;
            proxy_set_header Proxy "";
        }

    error_page 403 /40x.html;
        error_page 404 /40x.html;
        location = /40x.html {
           root   html;
           allow all;
        } 
 
   }
